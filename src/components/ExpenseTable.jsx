import React, {useState, useMemo } from "react";
import { Table, Modal, Typography } from "antd";
import { ExpenseForm } from "./ExpenseForm";
import { DeleteOutlined, EditTwoTone } from "@ant-design/icons";
import '../App.css';

export const ExpenseTable = React.memo(({expenses, onUpdateExpense, onDeleteExpense }) => {
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [editingExpense, setEditingExpense] = useState(null);

  const { Text } = Typography;

  const total = useMemo(() => {
    return expenses.reduce((acc, el) => acc + Number(el.amount), 0);
  }, [expenses]);

  const showEditModal = (expense) => {
    setEditingExpense(expense);
    setIsModalVisible(true);
  };

  const handleUpdate = (updatedExpense) => {
    onUpdateExpense(editingExpense.id, updatedExpense);
    setIsModalVisible(false);
    setEditingExpense(null);
  };

  const handleCancel = () => {
    setIsModalVisible(false);
    setEditingExpense(null);
  };

  const formatAmount = (amount) => {
    return new Intl.NumberFormat("ru-RU", {
      style: "currency",
      currency: "RUB",
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const formatDate = (isoString) => {
    return new Intl.DateTimeFormat("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    }).format(new Date(isoString));
  };

  const columns = [
    { title: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", dataIndex: "comment", key: "comment" },
    {
      title: "–°—É–º–º–∞",
      dataIndex: "amount",
      key: "amount",
      render: (amount) => formatAmount(amount),
    },
    {
      title: "–î–∞—Ç–∞",
      dataIndex: "date",
      key: "date",
      render: (date) => formatDate(date),
    },
    {
      title: "üßë‚Äçüíª",
      key: "actions",
      render: (_, record) => (
        <div className="icons">
          <EditTwoTone onClick={() => showEditModal(record)} />
          <DeleteOutlined
            onClick={() => handleDeleteExpense(record.id)}
            style={{ color: "red", marginLeft: "15px" }}
          />
        </div>
      ),
    },
  ];

  const handleDeleteExpense = (id) => {
    Modal.confirm({
      title: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?',
      content: '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!',
      okText: '–î–∞',
      okType: 'danger',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk: () => onDeleteExpense(id),
    });
  };

  const paginationConfig = {
    pageSize: 7, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total: expenses.length, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    showSizeChanger: true, // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    pageSizeOptions: ['5', '10', '20'], // –û–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  };

  return (
    <>
      <Table pagination={paginationConfig}  responsive dataSource={expenses} columns={columns} rowKey="id" />
      <Text  style={{ 
        color: 'green',
        fontSize: '20px',
        position: 'relative', 
        top: '-49px',  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É (–ø–æ–¥–Ω–∏–º–µ—Ç —ç–ª–µ–º–µ–Ω—Ç)
        left: '0px'   // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
  }} keyboard>–°—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {formatAmount(total)}</Text>
      <Modal
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥"
        open={isModalVisible}
        onCancel={handleCancel}
        footer={null}
      >
        <ExpenseForm
          onAddExpense={handleUpdate}
          initialValues={editingExpense}
        />
      </Modal>
    </>
  );
});
